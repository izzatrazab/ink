import PDFDocument from 'pdfkit';
import type { RequestHandler } from './$types';

export const GET: RequestHandler = async ({ url }) => {
	// const min = Number(url.searchParams.get('min') ?? '0');
	// const max = Number(url.searchParams.get('max') ?? '1');
	const doc = new PDFDocument();

	let buffers: any[] = [];

	// Collect data as the PDF is being generated
	doc.on('data', (chunk) => buffers.push(chunk));

	// Return a Promise that resolves when the PDF is fully generated
	await new Promise((resolve) => {
		doc.on('end', resolve);

		/** start add content to the PDF */
		// here is where we we need to RnD
		doc.text('Hello, this is a PDF generated by PDFKit!');

		// Example usage
		drawColumnAddition(doc, 100, 100, 999, 111, '+');
		drawColumnAddition(doc, 100, 180, 42, 19, '-');

		doc.addPage();
		doc.text('This is the second page');
		/** end add content to the PDF */

		// Finalize the PDF and end the stream
		doc.end();
	});

	// Concatenate all the chunks into a single buffer
	const pdfData = Buffer.concat(buffers);

	// Return the PDF as a response
	return new Response(pdfData, {
		headers: {
			'Content-Type': 'application/pdf',
			'Content-Disposition': 'inline' // open in page
			// 'Content-Disposition': 'attachment' // direct download
		}
	});
};

function drawColumnAddition(
	doc: typeof PDFDocument,
	x: number,
	y: number,
	num1: number,
	num2: number,
	operation: string
) {
	const width = 50;
	// Draw first number
	doc.text(num1.toString(), x, y, {
		width: width,
		align: 'right'
	});
	// Draw operation sign
	doc.text(operation, x, y + 20, {
		width: width,
		align: 'left'
	});
	// Draw second number
	doc.text(num2.toString(), x, y + 20, {
		width: width,
		align: 'right'
	});

	// Draw line
	const lineY = y + 35;
	doc
		.moveTo(x, lineY)
		.lineTo( x + width , lineY)
		.stroke();
	doc
		.moveTo(x, lineY + 20)
		.lineTo(x + 50, lineY + 20)
		.stroke();

	// Calculate and write the answer
	// const result = operation === '+' ? num1 + num2 : num1 - num2;
	// doc.text(result.toString(), x+30, lineY + 10);
}
